/tttt :
  name: get
  functionName: testfunc
  returnValue: "helloWorld"
#/pet/findByTags:
#  name : post
#  functionName: testfunc2
#  desc: hello World
/items:
    name: get
    functionName: read_items
    response_model : response_model=List[schemas.Item]
    returnValue : items
    functionContent :  items = crud.get_items(db, skip=skip, limit=limit)
    parameter : 'skip: int = 0, limit: int = 100, db: Session = Depends(get_db)'
/{item_id}:
    name: put
    functionName: update_item
    response_model: 'responses={403: {"description": "Operation forbidden"}}'
    returnValue: '{"item_id": item_id, "name": "The great Plumbus"}'
    functionContent: 'if item_id != "plumbus":
          raise HTTPException(
              status_code=403, detail="You can only update the item: plumbus"
          )'
    parameter: 'item_id: str'
# @app.get("/items/", response_model=List[schemas.Item])
# def read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
#     items = crud.get_items(db, skip=skip, limit=limit)
#     return items

#@router.put(
#    "/{item_id}",
#    tags=["custom"],
#    responses={403: {"description": "Operation forbidden"}},
#)
#async def update_item(item_id: str):
#    if item_id != "plumbus":
#        raise HTTPException(
#            status_code=403, detail="You can only update the item: plumbus"
#        )
#    return {"item_id": item_id, "name": "The great Plumbus"}